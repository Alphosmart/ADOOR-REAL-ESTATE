{
  "name": "adoor-real-estate",

import { FaBed, FaBath, FaRulerCombined, FaMapMarkerAlt, FaHeart, FaRegHeart } from 'react-icons/fa';  "version": "1.0.0",

  "description": "Real estate platform for property listings, viewings, and inquiries",

const PropertyCard = ({ property, onLike }) => {  "scripts": {

    const [liked, setLiked] = useState(false);    "install:backend": "cd backend && npm install",

    const primaryImage = property.images?.find(img => img.isPrimary) || property.images?.[0];    "install:frontend": "cd frontend && npm install", 

    const imageUrl = primaryImage?.url || property.productImage?.[0] || '/placeholder-property.jpg';    "build:frontend": "cd frontend && npm run build",

    "build": "npm run install:backend && npm run install:frontend && npm run build:frontend",

    const formatPrice = (amount, currency = 'NGN', rentPeriod = null) => {    "postinstall": "npm run install:frontend && npm run build:frontend",

        const formatted = new Intl.NumberFormat('en-NG', {    "start": "cd backend && npm start",

            style: 'currency',    "dev:backend": "cd backend && npm run dev",

            currency: currency,    "dev:frontend": "cd frontend && npm start",

            minimumFractionDigits: 0    "migrate:products": "node migrate-products-to-properties.js",

        }).format(amount);    "seed:properties": "node create-sample-properties.js"

  },

        return rentPeriod ? `${formatted}/${rentPeriod}` : formatted;  "engines": {

    };    "node": ">=18.0.0"

  }

    const handleLike = (e) => {}
        e.preventDefault();
        setLiked(!liked);
        if (onLike) onLike(property._id);
    };

    return (
        <Link 
            to={`/property/${property._id}`} 
            className="block bg-white rounded-lg shadow-md overflow-hidden hover:shadow-xl transition-shadow duration-300"
        >
            {/* Image */}
            <div className="relative h-56 overflow-hidden">
                <img 
                    src={imageUrl} 
                    alt={property.title}
                    className="w-full h-full object-cover hover:scale-110 transition-transform duration-300"
                />
                
                {/* Status Badge */}
                <div className="absolute top-3 left-3">
                    <span className={`px-3 py-1 rounded-full text-xs font-semibold ${
                        property.status === 'Available' ? 'bg-green-500 text-white' :
                        property.status === 'Pending' ? 'bg-yellow-500 text-white' :
                        'bg-gray-500 text-white'
                    }`}>
                        {property.status}
                    </span>
                </div>

                {/* Listing Type Badge */}
                <div className="absolute top-3 right-3">
                    <span className="px-3 py-1 bg-blue-600 text-white rounded-full text-xs font-semibold">
                        {property.listingType}
                    </span>
                </div>

                {/* Like Button */}
                <button
                    onClick={handleLike}
                    className="absolute bottom-3 right-3 bg-white p-2 rounded-full shadow-md hover:bg-gray-100 transition-colors"
                >
                    {liked ? (
                        <FaHeart className="text-red-500" size={20} />
                    ) : (
                        <FaRegHeart className="text-gray-600" size={20} />
                    )}
                </button>
            </div>

            {/* Content */}
            <div className="p-4">
                {/* Price */}
                <div className="mb-2">
                    <span className="text-2xl font-bold text-blue-600">
                        {formatPrice(
                            property.pricing?.amount || 0,
                            property.pricing?.currency || 'NGN',
                            property.pricing?.rentPeriod
                        )}
                    </span>
                </div>

                {/* Title */}
                <h3 className="text-lg font-semibold text-gray-800 mb-2 line-clamp-2 hover:text-blue-600 transition-colors">
                    {property.title}
                </h3>

                {/* Location */}
                <div className="flex items-center text-gray-600 mb-3">
                    <FaMapMarkerAlt className="mr-2 text-red-500" size={14} />
                    <span className="text-sm">
                        {property.location?.neighborhood && `${property.location.neighborhood}, `}
                        {property.location?.city}
                    </span>
                </div>

                {/* Property Details */}
                <div className="flex items-center justify-between text-gray-700 border-t pt-3">
                    <div className="flex items-center space-x-4">
                        {property.specifications?.bedrooms > 0 && (
                            <div className="flex items-center">
                                <FaBed className="mr-1 text-gray-500" size={16} />
                                <span className="text-sm">{property.specifications.bedrooms}</span>
                            </div>
                        )}
                        
                        {property.specifications?.bathrooms > 0 && (
                            <div className="flex items-center">
                                <FaBath className="mr-1 text-gray-500" size={16} />
                                <span className="text-sm">{property.specifications.bathrooms}</span>
                            </div>
                        )}
                        
                        {property.specifications?.area?.size && (
                            <div className="flex items-center">
                                <FaRulerCombined className="mr-1 text-gray-500" size={16} />
                                <span className="text-sm">
                                    {property.specifications.area.size} {property.specifications.area.unit}
                                </span>
                            </div>
                        )}
                    </div>
                </div>

                {/* Property Type */}
                <div className="mt-2">
                    <span className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded">
                        {property.propertyType}
                    </span>
                </div>
            </div>
        </Link>
    );
};

const PropertyListings = () => {
    const [properties, setProperties] = useState([]);
    const [loading, setLoading] = useState(true);
    const [filters, setFilters] = useState({
        propertyType: '',
        listingType: '',
        city: '',
        minPrice: '',
        maxPrice: '',
        bedrooms: '',
        search: ''
    });

    useEffect(() => {
        fetchProperties();
    }, [filters]);

    const fetchProperties = async () => {
        try {
            setLoading(true);
            const queryParams = new URLSearchParams();
            
            Object.entries(filters).forEach(([key, value]) => {
                if (value) queryParams.append(key, value);
            });

            const response = await fetch(`/api/properties?${queryParams}`);
            const data = await response.json();
            
            if (data.success) {
                setProperties(data.data);
            }
        } catch (error) {
            console.error('Error fetching properties:', error);
        } finally {
            setLoading(false);
        }
    };

    const handleFilterChange = (key, value) => {
        setFilters(prev => ({ ...prev, [key]: value }));
    };

    return (
        <div className="container mx-auto px-4 py-8">
            {/* Header */}
            <div className="mb-8">
                <h1 className="text-4xl font-bold text-gray-800 mb-2">Property Listings</h1>
                <p className="text-gray-600">Find your dream property</p>
            </div>

            {/* Filters */}
            <div className="bg-white rounded-lg shadow-md p-6 mb-8">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <input
                        type="text"
                        placeholder="Search properties..."
                        value={filters.search}
                        onChange={(e) => handleFilterChange('search', e.target.value)}
                        className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />

                    <select
                        value={filters.listingType}
                        onChange={(e) => handleFilterChange('listingType', e.target.value)}
                        className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                        <option value="">All Listings</option>
                        <option value="For Sale">For Sale</option>
                        <option value="For Rent">For Rent</option>
                        <option value="For Lease">For Lease</option>
                    </select>

                    <select
                        value={filters.propertyType}
                        onChange={(e) => handleFilterChange('propertyType', e.target.value)}
                        className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                        <option value="">All Types</option>
                        <option value="House">House</option>
                        <option value="Apartment">Apartment</option>
                        <option value="Condo">Condo</option>
                        <option value="Villa">Villa</option>
                        <option value="Land">Land</option>
                        <option value="Commercial">Commercial</option>
                    </select>

                    <select
                        value={filters.bedrooms}
                        onChange={(e) => handleFilterChange('bedrooms', e.target.value)}
                        className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                        <option value="">Any Bedrooms</option>
                        <option value="1">1+</option>
                        <option value="2">2+</option>
                        <option value="3">3+</option>
                        <option value="4">4+</option>
                        <option value="5">5+</option>
                    </select>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                    <input
                        type="text"
                        placeholder="City"
                        value={filters.city}
                        onChange={(e) => handleFilterChange('city', e.target.value)}
                        className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    
                    <input
                        type="number"
                        placeholder="Min Price"
                        value={filters.minPrice}
                        onChange={(e) => handleFilterChange('minPrice', e.target.value)}
                        className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    
                    <input
                        type="number"
                        placeholder="Max Price"
                        value={filters.maxPrice}
                        onChange={(e) => handleFilterChange('maxPrice', e.target.value)}
                        className="px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                </div>
            </div>

            {/* Results Count */}
            <div className="mb-4">
                <p className="text-gray-600">
                    {loading ? 'Loading...' : `${properties.length} properties found`}
                </p>
            </div>

            {/* Property Grid */}
            {loading ? (
                <div className="flex justify-center items-center h-64">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                </div>
            ) : properties.length === 0 ? (
                <div className="text-center py-12">
                    <p className="text-gray-500 text-lg">No properties found matching your criteria</p>
                </div>
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                    {properties.map(property => (
                        <PropertyCard 
                            key={property._id} 
                            property={property}
                            onLike={(id) => console.log('Liked:', id)}
                        />
                    ))}
                </div>
            )}
        </div>
    );
};

export default PropertyListings;
